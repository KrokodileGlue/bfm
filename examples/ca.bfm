// print "         One Dimensional Cellular Automata in brainfuck\n"
// print "                  by retrosegfault.tumblr.com\n"

define WIDTH 66;

macro rule90 (l, r, nl, nr, result)
	if l
		if nr
			result = 1;
		end
	end
	if nl
		if r
			result = 1;
		end
	end
end

macro rule30 (l, c, r, nl, nc, nr, result)
	if l
		if nc
			if nr
				result = 1;
			end
		end
	end
	if c
		if nl
			result = 1;
		end
	end
	if r
		if nc
			if nl
				result = 1;
			end
		end
	end
end

macro rule150 (l, c, r, nl, nc, nr, result)
	if l
		if c
			if r
				result = 1;
			end
		end
		if nc
			if nr
				result = 1;
			end
		end
	end
	if c
		if nl
			if nr
				result = 1;
			end
		end
	end
	if r
		if nc
			if nl
				result = 1;
			end
		end
	end
end

macro rule110 (l, c, r, nl, nc, nr, result)
	if l
		if c
			if nr
				result = 1;
			end
		end
		if nc
			if r
				result = 1;
			end
		end
	end
	if nl
		if c
			result = 1;
		end
		if nc
			if r
				result = 1;
			end
		end
	end
end

/* takes a field, an index in that field, and three variables to
 * write the results into. */
macro get_neighbors (field, i, left, center, right)
	var l     var c     var r
	l = i     c = i     r = i
	l - 1;              r + 1;

	var t
	t = i     t == 0;
	if t      l = WIDTH - 1;     end
	
	t = i     t == WIDTH - 1;
	if t      r = 0;             end

	left = field[l]     center = field[c]     right = field[r]
end

define RULE_90  0;     define RULE_30  1;
define RULE_150 2;     define RULE_110 3;

/* takes a field, an index in that field, a rule to apply, and a
 * variable to write the result into. */
macro update_cell (field, i, rule, result)
	var left           var center           var right
	var not_left       var not_center       var not_right

	get_neighbors (field, i, left, center, right)

	not_left   = left      not not_left
	not_center = center    not not_center
	not_right  = right     not not_right

	var temp
	temp = rule     temp == RULE_90;
	if temp
		rule90 (left,     right,
			not_left, not_right,
			result)
	end

	temp = rule     temp == RULE_30;
	if temp
		rule30 (left,     center,     right,
			not_left, not_center, not_right,
			result)
	end

	temp = rule     temp == RULE_150;
	if temp
		rule150 (left,     center,     right,
			 not_left, not_center, not_right,
			 result)
	end

	temp = rule     temp == RULE_110;
	if temp
		rule110 (left,     center,     right,
			 not_left, not_center, not_right,
			 result)
	end
end

macro copy_buffer (field)
	var i          i = WIDTH;
	while i
		i - 1;
		
		var idx     idx = i     idx + WIDTH;
		field[i] = field[idx]
	end
end

macro print_field (field)
	var f            f = 1;
	var i            i = 0;
	while f
		var t    t = field[i]
		
		if t     print "#"     end     not t /* else */
		if t     print " "     end
		
		/* while (i != WIDTH) */
		i + 1;
		f = i     f == WIDTH;     not f
	end
	print "\n"
end

macro update (field, rule)
	var i          i = WIDTH;
	while i
		i - 1;

		var result          result = 0;
		update_cell (field, i, rule, result)

		var idx     idx = i     idx + WIDTH;
		field[idx] = result
	end
end

macro run (field, rule, gen)
	while gen
		gen - 1;
		
		copy_buffer (field)
		print_field (field)
		update (field, rule)
	end
end

macro main ()
	print "0: rule 90\n1: rule 30\n2: rule 150\n3: rule 110\n"

	array field (WIDTH * 2);
	field[WIDTH + WIDTH / 2] = 1; // initial condition

	var gen          var rule

	print "rule: "            decimal rule
	print "generations: "     decimal gen
	run (field, rule, gen)
end

main ()
