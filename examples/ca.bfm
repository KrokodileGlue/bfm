print "         One Dimensional Cellular Automata in brainfuck\n"
print "                  by retrosegfault.tumblr.com\n"

define WIDTH 66;

array digits 3;
array field (WIDTH * 2);

field[WIDTH + WIDTH / 2] = 1; // initial condition

var generation     var i
var flag           var null /* used to throw away values
                             * we don't want to keep */

var algo
print "\t0: rule 90\n\t1: rule 30\n\t2: rule 150\n\t3: rule 73\n"
print "select an algorithm (0 - 3): "
input algo        algo - '0';
input null /* eat the return character */

print "enter a number of generations: "
// decimal generation

/* the following code takes in a decimal number as an input
 * and turns it into a cell value. it is made obsolete by
 * the introduction of the "decimal" keyword, which does the
 * same thing, but which generates much more compact bf.
 * 
 * this code is kept here as an example of a practical
 * programming task in bfm. */

var digit_ptr        flag = 1;
while flag
	var c        input c
	digits[digit_ptr] = c
	digit_ptr         + 1;

	flag = c     flag == 10; /* do this loop until we
	                          * hit a return */
	not flag
end
digit_ptr - 1; /* discard the return */

var digit
while digit_ptr
	digit_ptr - 1;

	var c
	c = digits[digit_ptr]
	c - '0';

	if digit
		var temp    temp = 1;

		i = digit
		while i
			i - 1;
			temp * 10;
		end
		c * temp
	end
	generation + c
	digit      + 1;
end

/* will find the outcome for a given rule from an index
 * in a given field and write it to result. */
macro do_generation (field, i, algo, result)
	var left           var center           var right
	var left_index     var center_index     var right_index
	var not_left       var not_center       var not_right

	var is_i_width      is_i_width = i
	var is_i_zero       is_i_zero  = i
	is_i_zero  == 0;
	is_i_width == WIDTH - 1;

	left_index   = i
	left_index   - 1;
	center_index = i
	right_index  = i
	right_index  + 1;
	
	if is_i_width
		right_index = 0;
	end
	if is_i_zero
		left_index  = WIDTH - 1;
	end
	
	left   = field[left_index]
	center = field[center_index]
	right  = field[right_index]
	
	/* left center and right now hold the cell
	 * values, bounded by the width */
	
	not_left   = left      not not_left
	not_center = center    not not_center
	not_right  = right     not not_right
	
	// rule 90
	var temp
	temp = algo     temp == 0;
	if temp
		if left
			if center
				if not_right
					result = 1;
				end
			end
			if not_center
				if not_right
					result = 1;
				end
			end
		end
		
		if not_left
			if center
				if right
					result = 1;
				end
			end
			if not_center
				if right
					result = 1;
				end
			end
		end
	end
	
	// rule 30
	temp = algo     temp == 1;
	if temp
		if left
			if not_center
				if not_right
					result = 1;
				end
			end
		end
		
		if center
			if not_left
				result = 1;
			end
		end
		
		if right
			if not_center
				if not_left
					result = 1;
				end
			end
		end
	end
	
	// rule 150
	temp = algo     temp == 2;
	if temp
		if left
			if center
				if right
					result = 1;
				end
			end
			if not_center
				if not_right
					result = 1;
				end
			end
		end
		
		if center
			if not_left
				if not_right
					result = 1;
				end
			end
		end
		
		if right
			if not_center
				if not_left
					result = 1;
				end
			end
		end
	end

	// rule 73
	temp = algo     temp == 3;
	if temp
		if not_left
			if not_center
				if not_right
					result = 1;
				end
			end

			if center
				if right
					result = 1;
				end
			end
		end

		if left
			if center
				if not_right
					result = 1;
				end
			end
		end
	end
end

/* main loop */
while generation
	generation - 1;
	
	/* copy the buffer into the main field */
	i = WIDTH;
	while i
		i - 1;
		
		var index    index = i
		index + WIDTH;
		field[i] = field[index]
	end

	/* print the field */
	flag = 1;
	i = 0;
	while flag
		var temp
		temp = field[i]
		
		if temp
			print "#"
		end
		not temp
		if temp
			print " "
		end
		
		i + 1;
		flag = i    flag == WIDTH;
		not flag
	end
	print "\n"
	
	/* do the logic */
	i = WIDTH;
	while i
		var result          result = 0;
		i - 1;

		do_generation (field, i, algo, result)

		var index    index = i
		index + WIDTH;
		
		field[index] = result
	end
end