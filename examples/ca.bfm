print "         One Dimensional Cellular Automata in brainfuck\n"
print "                  by retrosegfault.tumblr.com\n"

define WIDTH 66;

define RULE_90  0;     define RULE_30  1;
define RULE_150 2;     define RULE_73  3;

array field (WIDTH * 2);
field[WIDTH + WIDTH / 2] = 1; // initial condition

var gen                var rule

print "\t0: rule 90\n\t1: rule 30\n\t2: rule 150\n\t3: rule 73\nselect an algorithm: "
input rule          rule - '0';          input null /* eat the return character */

print "generations: "          decimal gen

macro copy_buffer (field)
	var i          i = WIDTH;
	while i
		i - 1;
		
		var idx    idx = i
		idx + WIDTH;
		field[i] = field[idx]
	end
end

macro print_field (field)
	var f          f = 1;
	var i          i = 0;
	while f
		var temp
		temp = field[i]
		
		if temp
			print "#"
		end
		not temp
		if temp
			print " "
		end
		
		i + 1;
		/* while (i != WIDTH) */
		f = i     f == WIDTH;     not f
	end
	print "\n"
end

macro update (field, rule)
	var i          i = WIDTH;
	while i
		var result          result = 0;
		i - 1;

		update_cell (field, i, rule, result)

		var idx    idx = i
		idx + WIDTH;
		
		field[idx] = result
	end
end

macro main (field, rule, gen)
	while gen
		gen - 1;
		
		copy_buffer (field)
		print_field (field)
		update (field, rule)
	end
end

/* takes a field, an index in that field, and three variables to
 * write the results into. */
macro get_neighbors (field, i, left, center, right)
	var left_idx       var center_idx       var right_idx

	left_idx   = i
	center_idx = i
	right_idx  = i

	left_idx   - 1;
	right_idx  + 1;

	var is_i_width      is_i_width = i
	var is_i_zero       is_i_zero  = i
	is_i_zero  == 0;    is_i_width == WIDTH - 1;

	if is_i_zero      left_idx  = WIDTH - 1;     end
	if is_i_width     right_idx = 0;             end

	left   = field[left_idx]
	center = field[center_idx]
	right  = field[right_idx]
end

macro rule90 (left, center, right, not_left, not_center, not_right, result)
	if left
		if center
			if not_right
				result = 1;
			end
		end
		if not_center
			if not_right
				result = 1;
			end
		end
	end
	if not_left
		if center
			if right
				result = 1;
			end
		end
		if not_center
			if right
				result = 1;
			end
		end
	end
end

macro rule30 (left, center, right, not_left, not_center, not_right, result)
	if left
		if not_center
			if not_right
				result = 1;
			end
		end
	end
	if center
		if not_left
			result = 1;
		end
	end
	if right
		if not_center
			if not_left
				result = 1;
			end
		end
	end
end

macro rule150 (left, center, right, not_left, not_center, not_right, result)
	if left
		if center
			if right
				result = 1;
			end
		end
		if not_center
			if not_right
				result = 1;
			end
		end
	end
	if center
		if not_left
			if not_right
				result = 1;
			end
		end
	end
	if right
		if not_center
			if not_left
				result = 1;
			end
		end
	end
end

macro rule73 (left, center, right, not_left, not_center, not_right, result)
	if not_left
		if not_center
			if not_right
				result = 1;
			end
		end

		if center
			if right
				result = 1;
			end
		end
	end
	if left
		if center
			if not_right
				result = 1;
			end
		end
	end
end

/* takes a field, an index in that field, a rule to apply, and a
 * variable to write the result into. */
macro update_cell (field, i, rule, result)
	var left           var center           var right
	var not_left       var not_center       var not_right

	get_neighbors (field, i, left, center, right)

	not_left   = left      not not_left
	not_center = center    not not_center
	not_right  = right     not not_right

	var temp
	temp = rule     temp == RULE_90;
	if temp
		rule90 (left,     center,     right,
			not_left, not_center, not_right,
			result)
	end

	temp = rule     temp == RULE_30;
	if temp
		rule30 (left,     center,     right,
			not_left, not_center, not_right,
			result)
	end

	temp = rule     temp == RULE_150;
	if temp
		rule150 (left,     center,     right,
			 not_left, not_center, not_right,
			 result)
	end

	temp = rule     temp == RULE_73;
	if temp
		rule73 (left,     center,     right,
			not_left, not_center, not_right,
			result)
	end
end

main (field, rule, gen)
